<?php

declare(strict_types=1);

/*
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This software consists of voluntary contributions made by many individuals
 * and is licensed under the MIT license. For more information, see
 * <https://github.com/digitalkaoz/php-ipfs>
 */

namespace IPFS\Api;

use IPFS\Annotation\Api as Endpoint;
use IPFS\Command\Command;

/**
 * @author Robert Sch√∂nthal <robert.schoenthal@gmail.com>
 * @autogenerated
 * @codeCoverageIgnore
 */
final class Stats implements Api
{
    /**
     * Show some diagnostic information on the bitswap agent.
     *
     * @Endpoint(name="stats:bitswap")
     *
     * @return Command
     */
    public function bitswap(): Command
    {
        return new Command(__METHOD__, get_defined_vars());
    }

    /**
     * Print ipfs bandwidth information.
     *
     * @Endpoint(name="stats:bw")
     *
     * @param string $peer     specify a peer to print bandwidth for
     * @param string $proto    specify a protocol to print bandwidth for
     * @param bool   $poll     print bandwidth at an interval
     * @param string $interval time interval to wait between updating output, if 'poll' is true
     *
     * @return Command
     */
    public function bw(string $peer = null, string $proto = null, bool $poll = false, string $interval = null): Command
    {
        return new Command(__METHOD__, get_defined_vars());
    }

    /**
     * Get stats for the currently used repo.
     *
     * @Endpoint(name="stats:repo")
     *
     * @param bool $human output RepoSize in MiB
     *
     * @return Command
     */
    public function repo(bool $human = false): Command
    {
        return new Command(__METHOD__, get_defined_vars());
    }
}
