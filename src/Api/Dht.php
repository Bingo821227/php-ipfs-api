<?php

declare(strict_types=1);

/*
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This software consists of voluntary contributions made by many individuals
 * and is licensed under the MIT license. For more information, see
 * <https://github.com/digitalkaoz/php-ipfs>
 */

namespace IPFS\Api;

use IPFS\Annotation\Api as Endpoint;
use IPFS\Command\Command;

/**
 * @author Robert Sch√∂nthal <robert.schoenthal@gmail.com>
 * @autogenerated
 * @codeCoverageIgnore
 */
final class Dht implements Api
{
    /**
     * Query the DHT for all of the multiaddresses associated with a Peer ID.
     *
     * @Endpoint(primary=false, name="dht:findpeer")
     *
     * @param string $arg     the ID of the peer to search for
     * @param bool   $verbose print extra information
     *
     * @return Command
     */
    public function findpeer(string $arg, bool $verbose = false): Command
    {
        return new Command(__METHOD__, get_defined_vars());
    }

    /**
     * Find peers in the DHT that can provide a specific value, given a key.
     *
     * @Endpoint(primary=false, name="dht:findprovs")
     *
     * @param string $arg     the key to find providers for
     * @param bool   $verbose print extra information
     *
     * @return Command
     */
    public function findprovs(string $arg, bool $verbose = false): Command
    {
        return new Command(__METHOD__, get_defined_vars());
    }

    /**
     * Given a key, query the DHT for its best value.
     *
     * @Endpoint(primary=false, name="dht:get")
     *
     * @param string $arg     the key to find a value for
     * @param bool   $verbose print extra information
     *
     * @return Command
     */
    public function get(string $arg, bool $verbose = false): Command
    {
        return new Command(__METHOD__, get_defined_vars());
    }

    /**
     * Write a key/value pair to the DHT.
     *
     * @Endpoint(primary=false, name="dht:put")
     *
     * @param string $arg     the key to store the value at
     * @param string $arg1    the value to store
     * @param bool   $verbose print extra information
     *
     * @return Command
     */
    public function put(string $arg, string $arg1, bool $verbose = false): Command
    {
        return new Command(__METHOD__, get_defined_vars());
    }

    /**
     * Find the closest Peer IDs to a given Peer ID by querying the DHT.
     *
     * @Endpoint(primary=false, name="dht:query")
     *
     * @param string $arg     the peerID to run the query against
     * @param bool   $verbose print extra information
     *
     * @return Command
     */
    public function query(string $arg, bool $verbose = false): Command
    {
        return new Command(__METHOD__, get_defined_vars());
    }
}
