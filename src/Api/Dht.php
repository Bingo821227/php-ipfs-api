<?php

declare (strict_types=1);
namespace IPFS\Api;

use IPFS\Annotation\Api as Endpoint;
use IPFS\Command\Command;
/**
 * @author Robert SchÃ¶nthal <robert.schoenthal@gmail.com>
 * @autogenerated
 * @codeCoverageIgnore
 */
final class Dht implements Api
{
    /**
    * Query the DHT for all of the multiaddresses associated with a Peer ID.
    *
    * @Endpoint(name="dht:findpeer")
    *
    * @param string $arg The ID of the peer to search for.
    * @param bool $verbose Print extra information.
    *
    * @return Command
    */
    public function findpeer(string $arg, bool $verbose = false) : Command
    {
        return new Command(__METHOD__, get_defined_vars());
    }
    /**
    * Find peers in the DHT that can provide a specific value, given a key.
    *
    * @Endpoint(name="dht:findprovs")
    *
    * @param string $arg The key to find providers for.
    * @param bool $verbose Print extra information.
    *
    * @return Command
    */
    public function findprovs(string $arg, bool $verbose = false) : Command
    {
        return new Command(__METHOD__, get_defined_vars());
    }
    /**
    * Given a key, query the DHT for its best value.
    *
    * @Endpoint(name="dht:get")
    *
    * @param string $arg The key to find a value for.
    * @param bool $verbose Print extra information.
    *
    * @return Command
    */
    public function get(string $arg, bool $verbose = false) : Command
    {
        return new Command(__METHOD__, get_defined_vars());
    }
    /**
    * Announce to the network that you are providing given values.
    *
    * @Endpoint(name="dht:provide")
    *
    * @param string]: The key[s $arg The key[s] to send provide records for.
    * @param bool $verbose Print extra information.
    * @param bool $recursive Recursively provide entire graph.
    *
    * @return Command
    */
    public function provide(string]: The key[s $arg, bool $verbose = false, bool $recursive = false) : Command
    {
        return new Command(__METHOD__, get_defined_vars());
    }
    /**
    * Write a key/value pair to the DHT.
    *
    * @Endpoint(name="dht:put")
    *
    * @param string $arg The key to store the value at.
    * @param string $arg1 The value to store.
    * @param bool $verbose Print extra information.
    *
    * @return Command
    */
    public function put(string $arg, string $arg1, bool $verbose = false) : Command
    {
        return new Command(__METHOD__, get_defined_vars());
    }
    /**
    * Find the closest Peer IDs to a given Peer ID by querying the DHT.
    *
    * @Endpoint(name="dht:query")
    *
    * @param string $arg The peerID to run the query against.
    * @param bool $verbose Print extra information.
    *
    * @return Command
    */
    public function query(string $arg, bool $verbose = false) : Command
    {
        return new Command(__METHOD__, get_defined_vars());
    }
}