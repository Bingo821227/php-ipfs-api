<?php

declare(strict_types=1);

/*
 * This file is part of the "php-ipfs" package.
 *
 * (c) Robert Schönthal <robert.schoenthal@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace IPFS\Api;

use IPFS\Annotation\Api as Endpoint;
use IPFS\Command\Command;

/**
 * @author Robert Schönthal <robert.schoenthal@gmail.com>
 * @autogenerated
 * @codeCoverageIgnore
 */
final class Key implements Api
{
    /**
     * Create a new keypair.
     *
     * @Endpoint(name="key:gen")
     *
     * @param string $arg  name of key to create Required:
     * @param string $type type of the key to create [rsa, ed25519]
     * @param int    $size size of the key to generate
     *
     * @return Command
     */
    public function gen(string $arg, string $type = null, int $size = 0): Command
    {
        return new Command(__METHOD__, get_defined_vars());
    }

    /**
     * List all local keypairs.
     *
     * @Endpoint(name="key:list")
     *
     * @param bool $l show extra information about keys
     *
     * @return Command
     */
    public function list(bool $l = false): Command
    {
        return new Command(__METHOD__, get_defined_vars());
    }

    /**
     * Rename a keypair.
     *
     * @Endpoint(name="key:rename")
     *
     * @param string $arg   name of key to rename Required:
     * @param string $arg1  new name of the key Required:
     * @param bool   $force allow to overwrite an existing key
     *
     * @return Command
     */
    public function rename(string $arg, string $arg1, bool $force = false): Command
    {
        return new Command(__METHOD__, get_defined_vars());
    }

    /**
     * Remove a keypair.
     *
     * @Endpoint(name="key:rm")
     *
     * @param string $arg names of keys to remove Required:
     * @param bool   $l   show extra information about keys
     *
     * @return Command
     */
    public function rm(string $arg, bool $l = false): Command
    {
        return new Command(__METHOD__, get_defined_vars());
    }
}
